<?xml version="1.0" encoding="UTF-8"?><definitions xmlns="http://ws.apache.org/ns/synapse">
    <registry provider="org.wso2.carbon.mediation.registry.WSO2Registry">
        <parameter name="cachableDuration">15000</parameter>
    </registry>
    <sequence name="fault">
        <log level="full">
            <property name="MESSAGE" value="Executing default &quot;fault&quot; sequence"/>
            <property name="ERROR_CODE" expression="get-property('ERROR_CODE')"/>
            <property name="ERROR_MESSAGE" expression="get-property('ERROR_MESSAGE')"/>
        </log>
        <drop/>
    </sequence>
    <sequence name="main">
        <in>
            <script language="js">var symbol = mc.getPayloadXML()..*::Code.toString();
    mc.setPayloadXML(
            &lt;m:getQuote xmlns:m="http://services.samples"&gt;
                &lt;m:request&gt;
                    &lt;m:symbol&gt;{symbol}&lt;/m:symbol&gt;
                &lt;/m:request&gt;
            &lt;/m:getQuote&gt;);</script>
            <send>
                <endpoint>
                    <address uri="http://localhost:9000/services/SimpleStockQuoteService"/>
                </endpoint>
            </send>
        </in>
        <out>
            <script language="js">var symbol = mc.getPayloadXML()..*::symbol.toString();
    var price = mc.getPayloadXML()..*::last.toString();
    mc.setPayloadXML(
            &lt;m:CheckPriceResponse xmlns:m="http://services.samples/xsd"&gt;
                &lt;m:Code&gt;{symbol}&lt;/m:Code&gt;
                &lt;m:Price&gt;{price}&lt;/m:Price&gt;
            &lt;/m:CheckPriceResponse&gt;);</script>
            <send/>
        </out>
    </sequence>
</definitions>



<!--README -->
<!--
1. Copy above synapse configuration and replace your source.
2. Enable DUBUG logging
3. Start sample axis2Server with SimpleStockQuote service.
4. Send a request from client -
ant stockquote -Daddurl=http://localhost:9000/services/SimpleStockQuoteService -Dtrpurl=http://localhost:8280/ -Dmode=customquote


Expected results:
The script used in this example has two js functions. Both these are inlined within 'in' flow and 'out' flow.

When the request reaches ESB the relevant js function should be read correctly. Also when response reaches ESB the relevant inlined funtion should be read correclty.
