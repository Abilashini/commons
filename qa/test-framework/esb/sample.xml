<!--
  ~  Copyright (c) 2005-2008, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~  WSO2 Inc. licenses this file to you under the Apache License,
  ~  Version 2.0 (the "License"); you may not use this file except
  ~  in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  ~
  -->
<!--
	test-case-[the test-case number]
-->
<project default="main">
<taskdef resource="net/sf/antcontrib/antlib.xml"/>
<!--<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>-->
<!-- <taskdef resource="net/sf/antcontrib/antcontrib.properties">
  <classpath>
    <pathelement location="/usr/share/ant/lib/ant-contrib-1.0b3.jar"/>
  </classpath>
</taskdef>-->

    <property name="activemqHome" value="./../../results/activemq/apache-activemq-${activemqVersion}"/>

	<!-- Delete the unwanted depends values -->
  	<target name="main" depends="clean,init,activemq-install,activemq-start,wso2esb-samples-start,axis2server-build,axis2server-start,dumb-client-test,esb-stop,axis2servers-stop,activemq-stop,activemq-uninstall,clean-up">
        <echo>Test for test-case-${no} completed !</echo>
    </target>

    <target name="clean">
        <echo>cleaning..</echo>
	<delete dir="./../../results/test-cases/test-case-${no}"/>
    </target>

    <target name="init">
        <echo>Start testing test-case-${no} ..</echo>
		<mkdir dir="./../../results/test-cases/test-case-${no}"/>

		<!-- 
		If you have to do any configuration changes, you have to do the changes and save that file ina predetermind place with a unique name  
		(e.g.test-framework/esbutils/jms/conf/axis2.xml-jms-enabled ) and then you have to backup the origenal file and replace with the 
		configured file 
		the following code may help you 
	
		<move file="${esbHome}/repository/conf/axis2.xml" tofile="./../../backup/axis2.xml-jms"/>
		<copy file="./../../utils/jms/conf/axis2.xml-jms-enabled" tofile="${esbHome}/repository/conf/axis2.xml"/>
		-->
    </target>

    <target name="clean-up">
        <echo>clean-up..</echo>
		<!--
		Use this code to clean the added configuration files;
		NOTE: Don't forget to move back the original back-up file using <move> task, otherwise future tests might fail. 

		<delete file="${esbHome}/repository/conf/axis2.xml"/>
		<move file="./../../backup/axis2.xml-jms" tofile="${esbHome}/repository/conf/axis2.xml"/>
		-->
    </target>

	<!--The code to start the WSO2 ESB with the sample Synapse configuration -->
    <target name="wso2esb-samples-start" depends="init">
 		<limit seconds="${esb-max-time-sec}">
			<exec dir="../../utils/esb" executable="./wso2esb-samples-start.sh" os="Linux">
				<arg value="${no}"/>
				<arg value="${esbHome}"/>
			</exec>
			<sleep seconds="22"/>
			<antcall target="poll">
			  <param name="poll.log" value="esb.log"/>
			  <param name="poll.string" value="${esb-start-indicator}"/>
			</antcall>
       	<echo>ESB Started !</echo>
		</limit>
    </target>

	<!--The code to stop WSO2 ESB-->
    <target name="esb-stop" >
       <exec dir="../../utils/esb" executable="./esb-stop.sh" os="Linux">
		<arg value="${no}"/>
		<arg value="${esbHome}"/>
       </exec>
    </target>

	<!--The code to build the sample Axis2 Server -->
    <target name="axis2server-build" depends="init">
       <exec dir="../../utils/axis2/server" executable="./axis2server-build.sh" os="Linux" >
		<arg value="${no}"/>
		<!--Add name of the appropriate service here (e.g SimpleStockQuoteService) -->
		<arg value="SimpleStockQuoteService"/>
		<arg value="."/>
		<arg value="${esbHome}"/>
       </exec>
    </target>

	<!--The code to start the sample Axis2 Server -->
    <target name="axis2server-start" depends="init">
		<limit seconds="${axis2server-max-time-sec}">
     	<exec dir="../../utils/axis2/server" executable="./axis2server-start.sh" os="Linux">
			<arg value="${no}"/>
			<arg value="${esbHome}"/>
			<arg value="${this.dir}"/>
	   	</exec>
		<sleep seconds="2"/>
		<antcall target="poll">
		  <param name="poll.log" value="axis2server.log"/>
		  <param name="poll.string" value="${axis2server-start-indicator}"/>
		</antcall>
       	<echo>Axis2 Sample server Started !</echo>
		</limit>
    </target>

 	<!--The code to stop sample Axis2 Server-->
    <target name="axis2servers-stop" >
       <exec dir="../../utils/axis2/server" executable="./axis2servers-stop.sh" os="Linux">
		<arg value="${no}"/>
		<arg value="${esbHome}"/>
       </exec>
    </target>

	<!--The code to install the ActiveMQ Server [only for JMS related testing]-->
    <target name="activemq-install" depends="init">
        <exec dir="./../../utils/jms" executable="ant" os="Linux">
			<arg value="-DesbHome=${esbHome}"/>
			<arg value="-DactivemqVersion=${activemqVersion}"/>
			<arg value="-DactivemqPath=${activemqPath}"/>
	    </exec>
       <echo>ActiveMQ installed</echo>
    </target>

	<!--The code to uninstall the ActiveMQ Server [only for JMS related testing]-->
    <target name="activemq-uninstall" depends="init">
        <exec dir="./../../utils/jms" executable="ant" os="Linux">
			<arg value="-DesbHome=${esbHome}"/>
			<arg value="-DactivemqVersion=${activemqVersion}"/>
			<arg value="-DactivemqPath=${activemqPath}"/>
			<arg value="uninstall"/>
	    </exec>
       <echo>ActiveMQ uninstalled!</echo>
    </target>

	<!--The code to start the ActiveMQ Server [only for JMS related testing]-->
    <target name="activemq-start" depends="init">
		<limit seconds="${activemq-max-time-sec}">
	     <exec dir="./../../utils/jms" executable="./activemq-start.sh" os="Linux">
			<arg value="${no}"/>
			<arg value="${activemqHome}"/>
	   	</exec>
		<sleep seconds="5"/>
		<antcall target="poll">
		  <param name="poll.log" value="activemq.log"/>
		  <param name="poll.string" value="${activemq-start-indicator}"/>
		</antcall>
       	<echo>ActiveMQ  Started !</echo>
		</limit>
    </target>

	<!--The code to stop ActiveMQ Server [only for JMS related testing]-->
    <target name="activemq-stop" >
       <exec dir="../../utils/jms" executable="./activemq-stop.sh" os="Linux">
		<arg value="${no}"/>
       </exec>
    </target>

	<!--
	The code to start the client (name the client appropriately)
	You also have to create a script file in the directory test-case-[this test-case No.]  
	e.g. test-case-250/dumb-client.sh 

	Enter the command for the client request here 
	e.g.

	cd $3/samples/axis2Client;
	ant jmsclient -Djms_type=pox -Djms_dest=dynamicQueues/StockQuoteProxy -Djms_payload=MSFT > $2/../../results/test-cases/test-case-$1/dumb-client.log
	
	NOTE: Here I have used the name dumb-client and if you are using some other name 
	or when there are several clients in one test don't forget to change the name, dumb-client, appropriately 
	in the shell script and in the ANT code below
	-->
    <target name="dumb-client-run" >
       <exec dir="." executable="./dumb-client.sh" os="Linux" >
		<arg value="${no}"/>
		<arg value="."/>
		<arg value="${esbHome}"/>
	</exec>
	<sleep seconds="${client-response-time-sec}"/>
    </target>
   
    <target name="dumb-client-test" depends="dumb-client-run" >
		<echo>Dumb Client test started</echo>
			<if>
				<and>
				<!-- 
				To test the test-case, you should find out the critical log entries, from the servers and clients, that stats that the test is successful. 
				Then you should select a String from the critical logs that wont change with the environment - like dates and random values.
				Now use them in the bellow code to check whether those Springs are present is in the log which are created when testing ESB.

				You can simply do this by editing the bellow code using the appropriate the log-file name and the expected string value.
				--> 
			 		<resourcecontains resource="./../../results/test-cases/test-case-${no}/activemq.log" substring=") started"/>
				 	<resourcecontains resource="./../../results/test-cases/test-case-${no}/axis2server.log" substring="samples.services.SimpleStockQuoteService  :: Accepted order"/>
					<resourcecontains resource="./../../results/test-cases/test-case-${no}/esb.log" substring="ProxyServiceMessageReceiver Proxy Service StockQuoteProxy received a new message"/> 
				</and>
			 <then>
			   <echo message="--------------------" />
			   <echo message="Test passed" />
			   <echo message="--------------------" />
			   <echo file="./../../results/results.txt" append="yes">[test-case-${no}] Dumb Client test Passed
</echo> 
	 		</then>
			 <else>
			   <echo message="--------------------" />
			   <echo message="Test failed" />
			   <echo message="--------------------" />
			   <echo file="./../../results/results.txt" append="yes">[test-case-${no}] Dumb Client test Failed
</echo> 
			 </else>
	</if>
    </target>

	<target name="poll">
     	<if>
		 <resourcecontains resource="./../../results/test-cases/test-case-${no}/${poll.log}" substring="${poll.string}"/>
		<else>
		 	<sleep seconds="2"/>
			<antcall target="loop" >
			  <param name="poll.log" value="${poll.log}"/>
			  <param name="poll.string" value="${poll.string}"/>
			</antcall>
		</else>
		</if>
    </target>
	<target name="loop">
		<antcall target="poll" />
 	</target>
</project>
